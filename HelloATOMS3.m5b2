{"category":"HelloATOMS3","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_HELLOATOMS3_LANGUAGES = {\n  \"CUSTOM_HELLOATOMS3_INIT\": {\n    \"en\": \"%1 init\"\n  },\n  \"CUSTOM_HELLOATOMS3_FACESMILE\": {\n    \"en\": \"SmileFace %1\"\n  },\n  \"CUSTOM_HELLOATOMS3_FACESLEEPY\": {\n    \"en\": \"SleepyFace %1\"\n  },\n  \"CUSTOM_HELLOATOMS3_FACENORMAL\": {\n    \"en\": \"NormalFace %1\"\n  },\n  \"CUSTOM_HELLOATOMS3_EXCLAMATION\": {\n    \"en\": \"Exclamation %1 %2\"\n  },\n  \"CUSTOM_HELLOATOMS3_PALE\": {\n    \"en\": \"Pale %1 %2\"\n  },\n  \"CUSTOM_HELLOATOMS3_FACECOLOR\": {\n    \"en\": \"FaceColor %1 %2\"\n  },\n  \"CUSTOM_HELLOATOMS3__BREATH\": {\n    \"en\": \" %1 _breath\"\n  },\n  \"CUSTOM_HELLOATOMS3__DRAW_EYE_OPEN\": {\n    \"en\": \" %1 _draw_eye_open\"\n  },\n  \"CUSTOM_HELLOATOMS3__DRAW_EYE_CLOSE\": {\n    \"en\": \" %1 _draw_eye_close\"\n  },\n  \"CUSTOM_HELLOATOMS3__CLEAR_EYES\": {\n    \"en\": \" %1 _clear_eyes\"\n  },\n  \"CUSTOM_HELLOATOMS3__DRAW_MOUTH_OPEN\": {\n    \"en\": \" %1 _draw_mouth_open\"\n  },\n  \"CUSTOM_HELLOATOMS3__DRAW_MOUTH_CLOSE\": {\n    \"en\": \" %1 _draw_mouth_close\"\n  },\n  \"CUSTOM_HELLOATOMS3__CLEAR_MOUTH\": {\n    \"en\": \" %1 _clear_mouth\"\n  },\n  \"CUSTOM_HELLOATOMS3__AVATAR_TIMER\": {\n    \"en\": \" %1 _avatar_timer, timer: %2\"\n  },\n  \"CUSTOM_HELLOATOMS3_SPEAK\": {\n    \"en\": \"Speak %1 %2\"\n  },\n  \"CUSTOM_HELLOATOMS3_SETLED\": {\n    \"en\": \"SetLED %1 %2\"\n  },\n  \"CUSTOM_HELLOATOMS3_GETLIGHT\": {\n    \"en\": \"GetLight %1\"\n  }\n};\n\nconst initType = 'custom_helloatoms3_init';\nBlockly.BlockRegExpList['custom_helloatoms3'] = {\n  regexp: new RegExp(/^custom_helloatoms3_/),\n  code: \"from HelloATOMS3 import HelloATOMS3\",\n  initBlockType: initType,\n  categoryId: 'custom_helloatoms3',\n}\nBlockly.utils.registerLanguages(CUSTOM_HELLOATOMS3_LANGUAGES)\n\nBlockly.Msg.CUSTOM_HELLOATOMS3_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_HELLOATOMS3 = 'HelloATOMS3'\n\nBlockly.utils.getcustom_helloatoms3Options = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['helloatoms3_0', 'helloatoms3_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_helloatoms3_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_helloatoms3Options },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'helloatoms3_0'\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname} = HelloATOMS3()\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3_facesmile\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3_FACESMILE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3_facesmile\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.FaceSmile()\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3_facesleepy\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3_FACESLEEPY,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3_facesleepy\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.FaceSleepy()\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3_facenormal\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3_FACENORMAL,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3_facenormal\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}.FaceNormal()\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3_exclamation\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3_EXCLAMATION,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"Enable\",\n          \"options\": [\n            [\"ON\", \"1\"],\n            [\"OFF\", \"0\"]\n          ],\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3_exclamation\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var Enable = block.getFieldValue('Enable');\n  return `${varname}.Exclamation(${Enable})\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3_pale\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3_PALE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"Enable\",\n          \"options\": [\n            [\"ON\", \"1\"],\n            [\"OFF\", \"0\"]\n          ],\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3_pale\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var Enable = block.getFieldValue('Enable');\n  return `${varname}.Pale(${Enable})\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3_facecolor\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3_FACECOLOR,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n        {\n          \"type\": \"field_colour\",\n          \"name\": \"color\",\n          \"colour\": \"16711680\"\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3_facecolor\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var color = block.getFieldValue('color');\n  return `${varname}.FaceColor(${color.replace('#', '0x')})\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3__breath\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3__BREATH,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3__breath\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}._breath()\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3__draw_eye_open\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3__DRAW_EYE_OPEN,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3__draw_eye_open\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}._draw_eye_open()\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3__draw_eye_close\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3__DRAW_EYE_CLOSE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3__draw_eye_close\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}._draw_eye_close()\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3__clear_eyes\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3__CLEAR_EYES,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3__clear_eyes\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}._clear_eyes()\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3__draw_mouth_open\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3__DRAW_MOUTH_OPEN,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3__draw_mouth_open\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}._draw_mouth_open()\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3__draw_mouth_close\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3__DRAW_MOUTH_CLOSE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3__draw_mouth_close\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}._draw_mouth_close()\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3__clear_mouth\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3__CLEAR_MOUTH,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3__clear_mouth\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname}._clear_mouth()\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3__avatar_timer\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3__AVATAR_TIMER,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n        {\n          'type': 'input_value',\n          'name': 'timer'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3__avatar_timer\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var timer = Blockly.Python.valueToCode(block, 'timer', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}._avatar_timer(${timer})\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3_speak\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3_SPEAK,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n        {\n          'type': 'input_value',\n          'name': 'text'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3_speak\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.Speak(${text})\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3_setled\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3_SETLED,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n        {\n          'type': 'input_value',\n          'name': 'val'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3_setled\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var val = Blockly.Python.valueToCode(block, 'val', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.SetLED(${val})\\n`\n}\n\nBlockly.Blocks[\"custom_helloatoms3_getlight\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_HELLOATOMS3_GETLIGHT,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_helloatoms3Options\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_helloatoms3_getlight\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.GetLight()`, Blockly.Python.ORDER_NONE]\n}","toolbox":"\n<category name=\"HelloATOMS3\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_helloatoms3\">\n<title text=\"HelloATOMS3\" docsLink=\"\"></title>\n<block type=\"custom_helloatoms3_init\"/><block type=\"custom_helloatoms3_facesmile\"/><block type=\"custom_helloatoms3_facesleepy\"/><block type=\"custom_helloatoms3_facenormal\"/><block type=\"custom_helloatoms3_exclamation\"/><block type=\"custom_helloatoms3_pale\"/><block type=\"custom_helloatoms3_facecolor\"/><block type=\"custom_helloatoms3_speak\">\n  <value name=\"text\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">Hello</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_helloatoms3_setled\">\n  <value name=\"val\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_helloatoms3_getlight\"/>\n</category>\n","toolboxitemid":"custom_helloatoms3","block_type":["custom_helloatoms3___init__","custom_helloatoms3_facesmile","custom_helloatoms3_facesleepy","custom_helloatoms3_facenormal","custom_helloatoms3_exclamation","custom_helloatoms3_pale","custom_helloatoms3_facecolor","custom_helloatoms3__breath","custom_helloatoms3__draw_eye_open","custom_helloatoms3__draw_eye_close","custom_helloatoms3__clear_eyes","custom_helloatoms3__draw_mouth_open","custom_helloatoms3__draw_mouth_close","custom_helloatoms3__clear_mouth","custom_helloatoms3__avatar_timer","custom_helloatoms3_speak","custom_helloatoms3_setled","custom_helloatoms3_getlight"]},"data":{"name":"HelloATOMS3","note":{"en":""},"details":{"color":"#0fb1d2","link":"","image":"","category":"Custom"},"header":{"file":"Avatar_ATOMS3","time":"2025-05-22","author":"akita11","email":"akita@ifdl.jp","license":"MIT License"},"assignments":[],"example":"","source_internal":"","source_external":"import os, sys, io\nimport M5\nfrom M5 import *\nfrom machine import Timer\nfrom hardware import Pin\nfrom hardware import ADC\nimport random\nimport math\nimport time","members":[{"name":"__init__","note":{},"label":{"en":"%1 init"},"params":[],"return":"","source":"        self.face_color_bg = 0x000000\n        self.face_color_fg = 0xffffff\n        self.face_color_text = 0x00ff00\n        self.SCREEN_W, self.SCREEN_H = 128, 128\n        self.EYE_X, self.EYE_Y, self.EYE_R = 32, 42, 6\n        self.EYE_CLOSE_W, self.EYE_CLOSE_H = 10, 3\n        self.MOUTH_W, self.MOUTH_H, self.MOUTH_H_OPEN = 48, 4, 14\n        # MOUTH_CLOSE_H = 10\n        self.MOUTH_X, self.MOUTH_Y = (self.SCREEN_W - self.MOUTH_W) // 2, 93\n        self.EXCLAM_X, self.EXCLAM_Y = 120, 5\n        self.EXCLAM_W, self.EXCLAM_H, self.EXCLAM_SPC = 5, 20, 5\n        self.PALE_X, self.PALE_Y = 105, 5\n        self.PALE_W, self.PALE_H, self.PALE_H_DIFF, self.PALE_SPC = 3, 20, 3, 6\n        self.FONT_W, self.FONT_H = 24, 24\n        self.fFaceStatus = 0\n        self.isMouthClosed = True\n        self.timer_avatar = Timer(-1)\n        self.tm_blink = 0\n        self.st_blink = 0\n        self.tm_blink_open = random.randint(2, 6) * 1000\n        self.timer_interval = 100  # [ms]\n        self.st_mouth = 0\n        self.fSpeak = False\n        self.tm_mouth = 0\n        self.st_mouth = 0\n        self.timer_mouth_interval = 500 # [ms]\n        self.text_speech = ''\n        self.dev = 0\n        self.breath_T = 0\n        self.breath_cycle = 30\n        self.breath_dev = 4\n        Display.setFont(M5.Lcd.FONTS.EFontJA24)\n        Display.fillScreen(self.face_color_bg)\n        self._draw_eye_open()\n        self._draw_mouth_close()\n        self.timer_avatar.init(period=self.timer_interval, mode=Timer.PERIODIC, callback=self._avatar_timer)\n        self._LED = Pin(5, mode=Pin.OUT)\n        self._Light = ADC(Pin(6), atten=ADC.ATTN_11DB)\n        pass","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"FaceSmile","note":{},"label":{"en":"SmileFace %1"},"params":[],"return":"","source":"        #global self.fFaceStatus\n        self.fFaceStatus = 1\n        pass","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"FaceSleepy","note":{},"label":{"en":"SleepyFace %1"},"params":[],"return":"","source":"        #global self.fFaceStatus\n        self.fFaceStatus = 2\n        pass","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"FaceNormal","note":{},"label":{"en":"NormalFace %1"},"params":[],"return":"","source":"        #global self.fFaceStatus\n        self.fFaceStatus = 0\n        pass","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"Exclamation","note":{},"label":{"en":"Exclamation %1 %2"},"params":[{"name":"Enable","type":null,"default":null,"note":{},"field":"dropdown","options":{"ON":"1","OFF":"0"}}],"return":"","source":"        if (Enable == 1):\n            self.color = 0xff0000 # red\n        else:\n            self.color = self.face_color_bg\n        Display.fillRect(self.EXCLAM_X, self.EXCLAM_Y, self.EXCLAM_W, self.EXCLAM_H, self.color)\n        Display.fillRect(self.EXCLAM_X, self.EXCLAM_Y + self.EXCLAM_H + self.EXCLAM_SPC, self.EXCLAM_W, self.EXCLAM_W, self.color)\n        pass","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"Pale","note":{},"label":{"en":"Pale %1 %2"},"params":[{"name":"Enable","type":null,"default":null,"note":{},"field":"dropdown","options":{"ON":"1","OFF":"0"}}],"return":"","source":"        if (Enable == 1):\n            self.color = 0x0000ff # blue\n        else:\n            self.color = self.face_color_bg\n        for i in range(4):\n            Display.fillRect(self.PALE_X + self.PALE_SPC * i, self.PALE_Y, self.PALE_W, self.PALE_H - self.PALE_H_DIFF * i, self.color)\n        pass","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"FaceColor","note":{},"label":{"en":"FaceColor %1 %2"},"params":[{"name":"color","type":"int","default":"16711680","note":{},"field":"colour"}],"return":"","source":"        #global self.face_color\n        self.face_color_bg = color\n        Display.fillScreen(self.face_color_bg)\n        self._draw_eye_open()\n        self._draw_mouth_close()\n\n        pass","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"_breath","note":{},"label":{"en":" %1 _breath"},"params":[],"return":"","source":"        global dev, breath_T\n        self.breath_T = (self.breath_T + 1) % self.breath_cycle\n        self.dev = int(self.breath_dev * math.sin(self.breath_T * 2 * math.pi / self.breath_cycle))","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"_draw_eye_open","note":{},"label":{"en":" %1 _draw_eye_open"},"params":[],"return":"","source":"        if self.fFaceStatus == 0:\n            # normal\n            Display.fillCircle(                self.EYE_X, self.EYE_Y + self.dev, self.EYE_R, self.face_color_fg)\n            Display.fillCircle(self.SCREEN_W - self.EYE_X, self.EYE_Y + self.dev, self.EYE_R, self.face_color_fg)\n        elif self.fFaceStatus == 1:\n            # smile\n            Display.fillArc(                self.EYE_X, self.EYE_Y + self.dev, self.EYE_R + 2, self.EYE_R - 2, 180, 360, self.face_color_fg)\n            Display.fillArc(self.SCREEN_W - self.EYE_X, self.EYE_Y + self.dev, self.EYE_R + 2, self.EYE_R - 2, 180, 360, self.face_color_fg)\n        else:\n            #sleep\n            Display.fillArc(                self.EYE_X, self.EYE_Y + self.dev, self.EYE_R + 2, self.EYE_R - 2, 0, 180, self.face_color_fg)\n            Display.fillArc(self.SCREEN_W - self.EYE_X, self.EYE_Y + self.dev, self.EYE_R + 2, self.EYE_R - 2, 0, 180, self.face_color_fg)","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"_draw_eye_close","note":{},"label":{"en":" %1 _draw_eye_close"},"params":[],"return":"","source":"        Display.fillRect(                self.EYE_X - self.EYE_CLOSE_W//2, self.EYE_Y - self.EYE_CLOSE_H//2 + self.dev, self.EYE_CLOSE_W, self.EYE_CLOSE_H, self.face_color_fg)\n        Display.fillRect(self.SCREEN_W - self.EYE_X - self.EYE_CLOSE_W//2, self.EYE_Y - self.EYE_CLOSE_H//2 + self.dev, self.EYE_CLOSE_W, self.EYE_CLOSE_H, self.face_color_fg)","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"_clear_eyes","note":{},"label":{"en":" %1 _clear_eyes"},"params":[],"return":"","source":"        Display.fillRect(               self.EYE_X - self.EYE_R - 3, self.EYE_Y - self.EYE_R - 4 + self.dev, self.EYE_R*2 + 6, self.EYE_R*2 + 8, self.face_color_bg)\n        Display.fillRect(self.SCREEN_W- self.EYE_X - self.EYE_R - 3, self.EYE_Y - self.EYE_R - 4 + self.dev, self.EYE_R*2 + 6, self.EYE_R*2 + 8, self.face_color_bg)","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"_draw_mouth_open","note":{},"label":{"en":" %1 _draw_mouth_open"},"params":[],"return":"","source":"        Display.fillRect(self.MOUTH_X, self.MOUTH_Y - self.MOUTH_H_OPEN // 2, self.MOUTH_W, self.MOUTH_H_OPEN, self.face_color_fg)","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"_draw_mouth_close","note":{},"label":{"en":" %1 _draw_mouth_close"},"params":[],"return":"","source":"        Display.fillRect(self.MOUTH_X, self.MOUTH_Y - self.MOUTH_H // 2, self.MOUTH_W, self.MOUTH_H, self.face_color_fg)","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"_clear_mouth","note":{},"label":{"en":" %1 _clear_mouth"},"params":[],"return":"","source":"        Display.fillRect(self.MOUTH_X-2, self.MOUTH_Y - self.MOUTH_H_OPEN // 2 - 2, self.MOUTH_W+4, self.MOUTH_H_OPEN + 4, self.face_color_bg)","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"_avatar_timer","note":{},"label":{"en":" %1 _avatar_timer, timer: %2"},"params":[{"name":"timer","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        global tm_blink, st_blink, tm_blink_open, tm_mouth, st_mouth, fSpeak, text_speech\n        self._breath()\n        self.tm_blink += self.timer_interval\n        self._clear_eyes()\n        if self.st_blink == 0:\n            if self.fFaceStatus != 2: # normal or smile\n                self._draw_eye_close()\n            if self.tm_blink >= 300:\n                self.st_blink = 1\n                self.tm_blink = 0\n        else:\n            self._draw_eye_open()\n            if self.tm_blink >= self.tm_blink_open:\n                self.tm_blink_open = random.randint(2, 6) * 1000\n                self.st_blink = 0\n                self.tm_blink = 0","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"Speak","note":{},"label":{"en":"Speak %1 %2"},"params":[{"name":"text","type":"str","default":"Hello","note":{},"field":""}],"return":"","source":"        global fSpeak, tm_mouth, text_speech\n        Display.drawArc(self.FONT_W, self.SCREEN_H - self.FONT_H, self.FONT_W, self.FONT_H, 180, 270, self.face_color_text)\n        Display.drawLine(0, self.SCREEN_H-1 - self.FONT_H, 0, self.SCREEN_H-1, self.face_color_text)\n        Display.drawLine(0, self.SCREEN_H-1, self.SCREEN_W-1, self.SCREEN_H-1, self.face_color_text)\n        Display.drawLine(self.SCREEN_W-1, self.SCREEN_H, self.SCREEN_W-1, self.SCREEN_H - self.FONT_H, self.face_color_text)\n        Display.drawLine(self.SCREEN_W-1, self.SCREEN_H - self.FONT_H, self.FONT_H, self.SCREEN_H - self.FONT_H, self.face_color_text)\n        Display.drawLine(self.FONT_W, self.SCREEN_H - 2*self.FONT_H, self.FONT_W, self.SCREEN_H - self.FONT_H, self.face_color_text)\n        Display.fillRect(1, self.SCREEN_H - self.FONT_H + 1, self.SCREEN_W - 2, self.FONT_H - 2, self.face_color_bg)\n        Display.setCursor(0, self.SCREEN_H - self.FONT_H)\n        Display.print(text, color=self.face_color_text)\n        self.text_speech = text\n        self.st_mouth = 0\n\n        for i in range(len(text)):\n            time.sleep_ms(500)\n            self.st_mouth = (self.st_mouth + 1) % 2\n            if self.st_mouth == 1:\n                self._clear_mouth()\n                self._draw_mouth_open()\n            else:\n                self._clear_mouth()\n                self._draw_mouth_close()\n            self.text_speech = self.text_speech[1:]\n            Display.fillRect(1, self.SCREEN_H - self.FONT_H + 1, self.SCREEN_W - 2, self.FONT_H - 2, self.face_color_bg)\n            Display.setCursor(0, self.SCREEN_H - self.FONT_H)\n            Display.print(self.text_speech, color=self.face_color_text)\n\n        Display.fillRect(0, self.SCREEN_H - 2*self.FONT_H, self.FONT_W+1, self.FONT_H, self.face_color_bg)\n        Display.fillRect(0, self.SCREEN_H - self.FONT_H, self.SCREEN_W, self.FONT_H, self.face_color_bg)\n        self._clear_mouth()\n        self._draw_mouth_close()\n        time.sleep_ms(500)","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"SetLED","note":{},"label":{"en":"SetLED %1 %2"},"params":[{"name":"val","type":"int","default":"0","note":{},"field":"number","max":"100","min":"0"}],"return":"","source":"        self._LED.value(val)\n        pass","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"GetLight","note":{},"label":{"en":"GetLight %1"},"params":[],"return":"","source":"        return(int(self._Light.read() / 4095 * 100))\n        pass","ast_return":{"code":"int(self._Light.read() / 4095 * 100)","id":null},"doc_return":null}],"python_file_name":"helloatoms3"},"pyCode":"\n\"\"\"\nfile     HelloATOMS3\ntime     2025-07-14\nauthor   akita11\nemail   akita@ifdl.jp\nlicense  MIT License\n\"\"\"\n\nimport os, sys, io\nimport M5\nfrom M5 import *\nfrom machine import Timer\nfrom hardware import Pin\nfrom hardware import ADC\nimport random\nimport math\nimport time\n\nclass HelloATOMS3:\n    \"\"\"\n    note:\n        en: ''\n    details:\n        color: '#0fb1d2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self):\n        \"\"\"\n        label:\n            en: '%1 init'\n        \"\"\"\n        self.face_color_bg = 0x000000\n        self.face_color_fg = 0xffffff\n        self.face_color_text = 0x00ff00\n        self.SCREEN_W, self.SCREEN_H = 128, 128\n        self.EYE_X, self.EYE_Y, self.EYE_R = 32, 42, 6\n        self.EYE_CLOSE_W, self.EYE_CLOSE_H = 10, 3\n        self.MOUTH_W, self.MOUTH_H, self.MOUTH_H_OPEN = 48, 4, 14\n        # MOUTH_CLOSE_H = 10\n        self.MOUTH_X, self.MOUTH_Y = (self.SCREEN_W - self.MOUTH_W) // 2, 93\n        self.EXCLAM_X, self.EXCLAM_Y = 120, 5\n        self.EXCLAM_W, self.EXCLAM_H, self.EXCLAM_SPC = 5, 20, 5\n        self.PALE_X, self.PALE_Y = 105, 5\n        self.PALE_W, self.PALE_H, self.PALE_H_DIFF, self.PALE_SPC = 3, 20, 3, 6\n        self.FONT_W, self.FONT_H = 24, 24\n        self.fFaceStatus = 0\n        self.isMouthClosed = True\n        self.timer_avatar = Timer(-1)\n        self.tm_blink = 0\n        self.st_blink = 0\n        self.tm_blink_open = random.randint(2, 6) * 1000\n        self.timer_interval = 100  # [ms]\n        self.st_mouth = 0\n        self.fSpeak = False\n        self.tm_mouth = 0\n        self.st_mouth = 0\n        self.timer_mouth_interval = 500 # [ms]\n        self.text_speech = ''\n        self.dev = 0\n        self.breath_T = 0\n        self.breath_cycle = 30\n        self.breath_dev = 4\n        Display.setFont(M5.Lcd.FONTS.EFontJA24)\n        Display.fillScreen(self.face_color_bg)\n        self._draw_eye_open()\n        self._draw_mouth_close()\n        self.timer_avatar.init(period=self.timer_interval, mode=Timer.PERIODIC, callback=self._avatar_timer)\n        self._LED = Pin(5, mode=Pin.OUT)\n        self._Light = ADC(Pin(6), atten=ADC.ATTN_11DB)\n        pass\n\n    def FaceSmile(self):\n        \"\"\"\n        label:\n            en: SmileFace %1\n        \"\"\"\n        #global self.fFaceStatus\n        self.fFaceStatus = 1\n        pass\n\n    def FaceSleepy(self):\n        \"\"\"\n        label:\n            en: SleepyFace %1\n        \"\"\"\n        #global self.fFaceStatus\n        self.fFaceStatus = 2\n        pass\n\n    def FaceNormal(self):\n        \"\"\"\n        label:\n            en: NormalFace %1\n        \"\"\"\n        #global self.fFaceStatus\n        self.fFaceStatus = 0\n        pass\n\n    def Exclamation(self, Enable):\n        \"\"\"\n        label:\n            en: Exclamation %1 %2\n        params:\n            Enable:\n                name: Enable\n                field: dropdown\n                options:\n                    'ON': '1'\n                    'OFF': '0'\n        \"\"\"\n        if (Enable == 1):\n            self.color = 0xff0000 # red\n        else:\n            self.color = self.face_color_bg\n        Display.fillRect(self.EXCLAM_X, self.EXCLAM_Y, self.EXCLAM_W, self.EXCLAM_H, self.color)\n        Display.fillRect(self.EXCLAM_X, self.EXCLAM_Y + self.EXCLAM_H + self.EXCLAM_SPC, self.EXCLAM_W, self.EXCLAM_W, self.color)\n        pass\n\n    def Pale(self, Enable):\n        \"\"\"\n        label:\n            en: Pale %1 %2\n        params:\n            Enable:\n                name: Enable\n                field: dropdown\n                options:\n                    'ON': '1'\n                    'OFF': '0'\n        \"\"\"\n        if (Enable == 1):\n            self.color = 0x0000ff # blue\n        else:\n            self.color = self.face_color_bg\n        for i in range(4):\n            Display.fillRect(self.PALE_X + self.PALE_SPC * i, self.PALE_Y, self.PALE_W, self.PALE_H - self.PALE_H_DIFF * i, self.color)\n        pass\n\n    def FaceColor(self, color: int = 0xFF0000):\n        \"\"\"\n        label:\n            en: FaceColor %1 %2\n        params:\n            color:\n                name: color\n                type: int\n                default: '0xFF0000'\n                field: colour\n        \"\"\"\n        #global self.face_color\n        self.face_color_bg = color\n        Display.fillScreen(self.face_color_bg)\n        self._draw_eye_open()\n        self._draw_mouth_close()\n\n        pass\n\n    def _breath(self):\n        \"\"\"\n        label:\n            en: ' %1 _breath'\n        \"\"\"\n        global dev, breath_T\n        self.breath_T = (self.breath_T + 1) % self.breath_cycle\n        self.dev = int(self.breath_dev * math.sin(self.breath_T * 2 * math.pi / self.breath_cycle))\n\n    def _draw_eye_open(self):\n        \"\"\"\n        label:\n            en: ' %1 _draw_eye_open'\n        \"\"\"\n        if self.fFaceStatus == 0:\n            # normal\n            Display.fillCircle(                self.EYE_X, self.EYE_Y + self.dev, self.EYE_R, self.face_color_fg)\n            Display.fillCircle(self.SCREEN_W - self.EYE_X, self.EYE_Y + self.dev, self.EYE_R, self.face_color_fg)\n        elif self.fFaceStatus == 1:\n            # smile\n            Display.fillArc(                self.EYE_X, self.EYE_Y + self.dev, self.EYE_R + 2, self.EYE_R - 2, 180, 360, self.face_color_fg)\n            Display.fillArc(self.SCREEN_W - self.EYE_X, self.EYE_Y + self.dev, self.EYE_R + 2, self.EYE_R - 2, 180, 360, self.face_color_fg)\n        else:\n            #sleep\n            Display.fillArc(                self.EYE_X, self.EYE_Y + self.dev, self.EYE_R + 2, self.EYE_R - 2, 0, 180, self.face_color_fg)\n            Display.fillArc(self.SCREEN_W - self.EYE_X, self.EYE_Y + self.dev, self.EYE_R + 2, self.EYE_R - 2, 0, 180, self.face_color_fg)\n\n    def _draw_eye_close(self):\n        \"\"\"\n        label:\n            en: ' %1 _draw_eye_close'\n        \"\"\"\n        Display.fillRect(                self.EYE_X - self.EYE_CLOSE_W//2, self.EYE_Y - self.EYE_CLOSE_H//2 + self.dev, self.EYE_CLOSE_W, self.EYE_CLOSE_H, self.face_color_fg)\n        Display.fillRect(self.SCREEN_W - self.EYE_X - self.EYE_CLOSE_W//2, self.EYE_Y - self.EYE_CLOSE_H//2 + self.dev, self.EYE_CLOSE_W, self.EYE_CLOSE_H, self.face_color_fg)\n\n    def _clear_eyes(self):\n        \"\"\"\n        label:\n            en: ' %1 _clear_eyes'\n        \"\"\"\n        Display.fillRect(               self.EYE_X - self.EYE_R - 3, self.EYE_Y - self.EYE_R - 4 + self.dev, self.EYE_R*2 + 6, self.EYE_R*2 + 8, self.face_color_bg)\n        Display.fillRect(self.SCREEN_W- self.EYE_X - self.EYE_R - 3, self.EYE_Y - self.EYE_R - 4 + self.dev, self.EYE_R*2 + 6, self.EYE_R*2 + 8, self.face_color_bg)\n\n    def _draw_mouth_open(self):\n        \"\"\"\n        label:\n            en: ' %1 _draw_mouth_open'\n        \"\"\"\n        Display.fillRect(self.MOUTH_X, self.MOUTH_Y - self.MOUTH_H_OPEN // 2, self.MOUTH_W, self.MOUTH_H_OPEN, self.face_color_fg)\n\n    def _draw_mouth_close(self):\n        \"\"\"\n        label:\n            en: ' %1 _draw_mouth_close'\n        \"\"\"\n        Display.fillRect(self.MOUTH_X, self.MOUTH_Y - self.MOUTH_H // 2, self.MOUTH_W, self.MOUTH_H, self.face_color_fg)\n\n    def _clear_mouth(self):\n        \"\"\"\n        label:\n            en: ' %1 _clear_mouth'\n        \"\"\"\n        Display.fillRect(self.MOUTH_X-2, self.MOUTH_Y - self.MOUTH_H_OPEN // 2 - 2, self.MOUTH_W+4, self.MOUTH_H_OPEN + 4, self.face_color_bg)\n\n    def _avatar_timer(self, timer):\n        \"\"\"\n        label:\n            en: ' %1 _avatar_timer, timer: %2'\n        params:\n            timer:\n                name: timer\n        \"\"\"\n        global tm_blink, st_blink, tm_blink_open, tm_mouth, st_mouth, fSpeak, text_speech\n        self._breath()\n        self.tm_blink += self.timer_interval\n        self._clear_eyes()\n        if self.st_blink == 0:\n            if self.fFaceStatus != 2: # normal or smile\n                self._draw_eye_close()\n            if self.tm_blink >= 300:\n                self.st_blink = 1\n                self.tm_blink = 0\n        else:\n            self._draw_eye_open()\n            if self.tm_blink >= self.tm_blink_open:\n                self.tm_blink_open = random.randint(2, 6) * 1000\n                self.st_blink = 0\n                self.tm_blink = 0\n\n    def Speak(self, text: str = 'Hello'):\n        \"\"\"\n        label:\n            en: Speak %1 %2\n        params:\n            text:\n                name: text\n                type: str\n                default: Hello\n        \"\"\"\n        global fSpeak, tm_mouth, text_speech\n        Display.drawArc(self.FONT_W, self.SCREEN_H - self.FONT_H, self.FONT_W, self.FONT_H, 180, 270, self.face_color_text)\n        Display.drawLine(0, self.SCREEN_H-1 - self.FONT_H, 0, self.SCREEN_H-1, self.face_color_text)\n        Display.drawLine(0, self.SCREEN_H-1, self.SCREEN_W-1, self.SCREEN_H-1, self.face_color_text)\n        Display.drawLine(self.SCREEN_W-1, self.SCREEN_H, self.SCREEN_W-1, self.SCREEN_H - self.FONT_H, self.face_color_text)\n        Display.drawLine(self.SCREEN_W-1, self.SCREEN_H - self.FONT_H, self.FONT_H, self.SCREEN_H - self.FONT_H, self.face_color_text)\n        Display.drawLine(self.FONT_W, self.SCREEN_H - 2*self.FONT_H, self.FONT_W, self.SCREEN_H - self.FONT_H, self.face_color_text)\n        Display.fillRect(1, self.SCREEN_H - self.FONT_H + 1, self.SCREEN_W - 2, self.FONT_H - 2, self.face_color_bg)\n        Display.setCursor(0, self.SCREEN_H - self.FONT_H)\n        Display.print(text, color=self.face_color_text)\n        self.text_speech = text\n        self.st_mouth = 0\n\n        for i in range(len(text)):\n            time.sleep_ms(500)\n            self.st_mouth = (self.st_mouth + 1) % 2\n            if self.st_mouth == 1:\n                self._clear_mouth()\n                self._draw_mouth_open()\n            else:\n                self._clear_mouth()\n                self._draw_mouth_close()\n            self.text_speech = self.text_speech[1:]\n            Display.fillRect(1, self.SCREEN_H - self.FONT_H + 1, self.SCREEN_W - 2, self.FONT_H - 2, self.face_color_bg)\n            Display.setCursor(0, self.SCREEN_H - self.FONT_H)\n            Display.print(self.text_speech, color=self.face_color_text)\n\n        Display.fillRect(0, self.SCREEN_H - 2*self.FONT_H, self.FONT_W+1, self.FONT_H, self.face_color_bg)\n        Display.fillRect(0, self.SCREEN_H - self.FONT_H, self.SCREEN_W, self.FONT_H, self.face_color_bg)\n        self._clear_mouth()\n        self._draw_mouth_close()\n        time.sleep_ms(500)\n\n    def SetLED(self, val: int = 0):\n        \"\"\"\n        label:\n            en: SetLED %1 %2\n        params:\n            val:\n                name: val\n                type: int\n                default: '0'\n                field: number\n                max: '100'\n                min: '0'\n        \"\"\"\n        self._LED.value(val)\n        pass\n\n    def GetLight(self):\n        \"\"\"\n        label:\n            en: GetLight %1\n        \"\"\"\n        return(int(self._Light.read() / 4095 * 100))\n        pass\n\n\n","version":"alpha2"}